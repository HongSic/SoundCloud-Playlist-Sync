using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using Soundcloud_Playlist_Downloader.JsonObjects;

namespace Soundcloud_Playlist_Downloader.Utils
{
    internal class PlaylistUtils
    {
        public static bool[] CreateSimpleM3U(string directoryPath)
        {
            var manifestPath = ManifestUtils.DetermineManifestPath(directoryPath);
            var completed = new bool[4];
            if (!File.Exists(manifestPath)) return completed;
            var manifest = ManifestUtils.LoadManifestFromFile(directoryPath);
        
            WriteM3UtoFile(
                new List<string>(SortOnMostLiked(directoryPath, manifest)), 
                Path.Combine(directoryPath, "Most Liked (SC Downloader).m3u8"), 
                out completed[0]
                );
              
            WriteM3UtoFile(
                new List<string>(SortOnMostPlayed(directoryPath, manifest)), 
                Path.Combine(directoryPath, "Most Played (SC Downloader).m3u8"), 
                out completed[1]
                );

            WriteM3UtoFile(
                new List<string>(RecentlyChanged(manifest)), 
                Path.Combine(directoryPath, "Recently Changed (SC Downloader).m3u8"), 
                out completed[2]
                );

            WriteM3UtoFile(
                new List<string>(RecentlyAdded(directoryPath, manifest)),
                Path.Combine(directoryPath, "Recently Added (SC Downloader).m3u8"),
                out completed[3]
                );

            return completed;
        }       
        public static void WriteM3UtoFile(IList<string> newM3U, string m3uPath, out bool updateSuccesful)
        {
            updateSuccesful = false;
            for (var attempts = 0; attempts < 5; attempts++)
            {
                try
                {             
                    File.WriteAllLines(m3uPath, newM3U);
                    updateSuccesful = true;
                    break;                    
                }
                catch (Exception)
                {
                    // ignored
                }
                Thread.Sleep(50); // Pause 50ms before new attempt
            }
            if (!updateSuccesful)
            {
                throw new Exception("Unable to create m3u file.");
            }
        }

        public static IList<string> SortOnMostLiked(string dir, List<Track> manifest)
        {
            IEnumerable<string> tempNewM3U =
                from m in manifest
                orderby m.favoritings_count ascending
                select m.LocalPathRelative.Substring(1);
            IList<string> newM3U = tempNewM3U.ToList();
            newM3U.Insert(0,
                "# Simple M3U8 playlist. Sorted on most liked (on SoundCloud). Generated by the SoundCloud Playlist Sync tool.");
            return newM3U;
        }

        public static IList<string> SortOnMostPlayed(string dir, List<Track> manifest)
        {
            IEnumerable<string> tempNewM3U =
                from m in manifest
                orderby m.playback_count descending 
                select m.LocalPathRelative.Substring(1);
            IList<string> newM3U = tempNewM3U.ToList();
            newM3U.Insert(0, 
                "# Simple M3U8 playlist. Sorted on most played (on SoundCloud). Generated by the SoundCloud Playlist Sync tool.");         
            return newM3U;
        }

        public static IList<string> RecentlyAdded(string dir, List<Track> manifest)
        {
            IEnumerable<string> tempNewM3U =
                from m in manifest
                orderby m.DownloadDateTimeUtc descending
                select m.LocalPathRelative.Substring(1);
            IList<string> newM3U = tempNewM3U.ToList();
            newM3U.Insert(0,
                "# Simple M3U8 playlist. Sorted on recently added (on SoundCloud). Generated by the SoundCloud Playlist Sync tool.");         
            return newM3U;
        }

        public static IList<string> RecentlyChanged(List<Track> manifest)
        {
            IEnumerable<string> tempNewM3U =
                from m in manifest
                orderby m.ModifiedDateTimeUtc descending
                select m.LocalPathRelative.Substring(1);         
            IList<string> newM3U = tempNewM3U.ToList();
            newM3U.Insert(0, "# Simple M3U8 playlist. Sorted on recently changed. This is the only playlist that includes every song downloaded because only this playlist gets the data from the manifest file. Generated by the SoundCloud Playlist Sync tool.");
            return newM3U;          
        }


        public static string MakeRelative(string filePath, string referencePath)
        {
            return filePath.Replace(referencePath + "\\", "");
        }
    }
}