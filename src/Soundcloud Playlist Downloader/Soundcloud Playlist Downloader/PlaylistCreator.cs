using Soundcloud_Playlist_Downloader.JsonPoco;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Soundcloud_Playlist_Downloader
{
    class PlaylistCreator : PlaylistSync
    {
        public void createSimpleM3U(IList<Track> tracks, string directoryPath)
        {
            string manifestPath = DetermineManifestPath(directoryPath);
            if (File.Exists(manifestPath))
            {
                string[] songsDownloaded = File.ReadAllLines(manifestPath);

                string recentlyAddedPath = Path.Combine(directoryPath, "Recently Added (SC Downloader).m3u");
                IList<string> recentlyAddedM3U = new List<string>(recentlyAdded(tracks, directoryPath, songsDownloaded));
                writeM3UtoFile(recentlyAddedM3U, recentlyAddedPath);

                string sortOnMostLikedPath = Path.Combine(directoryPath, "Most Liked (SC Downloader).m3u");
                IList<string> sortOnMostLikedM3U = new List<string>(sortOnMostLiked(tracks, directoryPath, songsDownloaded));
                writeM3UtoFile(sortOnMostLikedM3U, sortOnMostLikedPath);

                string sortOnMostPlayedPath = Path.Combine(directoryPath, "Most Played (SC Downloader).m3u");
                IList<string> sortOnMostPlayedM3U = new List<string>(sortOnMostPlayed(tracks, directoryPath, songsDownloaded));
                writeM3UtoFile(sortOnMostPlayedM3U, sortOnMostPlayedPath);
            }
        }

        public static string getExtension(string[] songsDownloaded, string trackLocalpath)
        {
            string extension = ".mp3";

            int indexInArray = -1;
            for (int i = 0; i < songsDownloaded.Length; i++)
            {
                if (songsDownloaded[i].Contains(trackLocalpath))
                {
                    indexInArray = i;
                    break;
                }
            }

            if (indexInArray > -1)
            {
                int positionInString = songsDownloaded[indexInArray].LastIndexOf('.');
                if (positionInString > -1)
                    extension = songsDownloaded[indexInArray].Substring(positionInString);
            }
            return extension;
        }

        public void writeM3UtoFile(IList<string> newM3U, string m3uPath)
        {
            bool updateSuccesful = false;
            for (int attempts = 0; attempts < 5; attempts++)
            {
                try
                {
                    lock (WritePlaylistLock)
                    {
                        File.WriteAllLines(m3uPath, newM3U);
                        updateSuccesful = true;
                        break;
                    }
                }
                catch (Exception)
                {
                }
                System.Threading.Thread.Sleep(50); // Pause 50ms before new attempt
            }
            if (!updateSuccesful)
            {
                IsError = true;
                throw new Exception("Unable to create m3u file.");
            }
        }

        public static IList<string> sortOnMostLiked(IList<Track> tracks, string dir, string[] songsDownloaded)
        {
            IList<string> newM3U = new List<string>();
            newM3U.Add("# Simple M3U playlist. Sorted on most liked (on SoundCloud). Generated by the SoundCloud Playlist Sync tool.");

            IEnumerable<Track> sortedTracks = tracks.OrderByDescending(r => r.GetType().GetProperty("favoritings_count").GetValue(r, null));
            foreach (Track track in sortedTracks)
            {
                string relativeTrackPath = MakeRelative(track.LocalPath, dir);
                newM3U.Add(relativeTrackPath + getExtension(songsDownloaded, track.LocalPath));
            }
         
            return newM3U;
        }

        public static IList<string> sortOnMostPlayed(IList<Track> tracks, string dir, string[] songsDownloaded)
        {
            IList<string> newM3U = new List<string>();
            newM3U.Add("# Simple M3U playlist. Sorted on most played (on SoundCloud). Generated by the SoundCloud Playlist Sync tool.");

            IEnumerable<Track> sortedTracks = tracks.OrderByDescending(r => r.GetType().GetProperty("playback_count").GetValue(r, null));
            foreach (Track track in sortedTracks)
            {
                string relativeTrackPath = MakeRelative(track.LocalPath, dir);
                newM3U.Add(relativeTrackPath + getExtension(songsDownloaded, track.LocalPath));
            }
         
            return newM3U;
        }

        public static IList<string> recentlyAdded(IList<Track> tracks, string dir, string[] songsDownloaded)
        {
            IList<string> newM3U = new List<string>();
            newM3U.Add("# Simple M3U playlist. Sorted on recently added (on SoundCloud). Generated by the SoundCloud Playlist Sync tool.");
            foreach (Track track in tracks)
            {
                string relativeTrackPath = MakeRelative(track.LocalPath, dir);
                newM3U.Add(relativeTrackPath + getExtension(songsDownloaded, track.LocalPath));
            }
            return newM3U;
        }

        public static string MakeRelative(string filePath, string referencePath)
        {
            return filePath.Replace(referencePath + "\\", "");
        }
     
    }
}
